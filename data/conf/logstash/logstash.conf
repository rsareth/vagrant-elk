input {
    file {
        type => "microsoft_ad"
        path => "/vagrant_data/idm/Microsoft - AD.log"
        start_position => "beginning"
#        codec => multiline {
#            negate => false
#            pattern => "^(<|([ ]*<))|[ ]*[a-zA-z0-9]*"
#            what => previous
#        }
    }
#    file {
#        type => "novell_edir"
#        path => "/vagrant_data/idm/Novell - eDir.log"
#        start_position => "beginning"
##        codec => multiline {
##            negate => false
##            pattern => "^(<|([ ]*<))|[ ]*[a-zA-z0-9]*"
##            what => previous
##        }
#    }
#    file {
#        type => "novell_eos"
#        path => "/vagrant_data/idm/Novell - EOS.log"
#        start_position => "beginning"
##        codec => multiline {
##            negate => false
##            pattern => "^(<|([ ]*<))|[ ]*[a-zA-z0-9]*"
##            what => previous
##        }
#    }
#    file {
#        type => "sun_ldap"
#        path => "/vagrant_data/idm/Sun - LDAP.log"
#        start_position => "beginning"
##        codec => multiline {
##            negate => false
##            pattern => "^(<|([ ]*<))|[ ]*[a-zA-z0-9]*"
##            what => previous
##        }
#    }
}

filter {

    if [type] == "microsoft_ad" {
        grok {
            match => [ "message", "^\[%{DATE:date} %{TIME:time}\.%{INT:integer}\]:%{ACTIVE_DIRECTORY_TYPE}:%{GREEDYDATA:donnees}$" ]
            patterns_dir => "/vagrant_data/conf/pattern"
        }

        mutate {
            replace => [ "message", "%{donnees}" ]
            remove_field => [ "donnees" ]
        }
    }
    if [type] == "novell_edir" {
        grok {
            match => [ "message", "^\[%{DATE:date} %{TIME:time}\.%{INT:integer}\]:%{ACTIVE_DIRECTORY_TYPE}:%{GREEDYDATA:donnees}$" ]
            patterns_dir => "/vagrant_data/conf/pattern"
        }

        mutate {
            replace => [ "message", "%{donnees}" ]
            remove_field => [ "donnees" ]
        }
    }
    if [type] == "novell_eos" {
        grok {
            match => [ "message", "^\[%{DATE:date} %{TIME:time}\.%{INT:integer}\]:%{ACTIVE_DIRECTORY_TYPE}:%{GREEDYDATA:donnees}$" ]
            patterns_dir => "/vagrant_data/conf/pattern"
        }

        mutate {
            replace => [ "message", "%{donnees}" ]
            remove_field => [ "donnees" ]
        }
    }
    if [type] == "sun_ldap" {
        grok {
            match => [ "message", "^\[%{DATE:date} %{TIME:time}\.%{INT:integer}\]:%{ACTIVE_DIRECTORY_TYPE}:%{GREEDYDATA:donnees}$" ]
            patterns_dir => "/vagrant_data/conf/pattern"
        }

        mutate {
            replace => [ "message", "%{donnees}" ]
            remove_field => [ "donnees" ]
        }
    }
}

output {
#  elasticsearch {
#    host => localhost
#    #index => "logstash-poc-id-%{+YYYY.MM.dd}"
#    index => "myworld"
#  }
#  stdout {
#    codec => rubydebug
#  }

    #if [type] == "microsoft_ad" {
        file {
            type => "microsoft_ad"
            path => "/tmp/logstash_output_microsoft_ad.txt"
        }
    #}
    #else if [type] == "novell_eos" {
        file {
            type => "novell_eos"
            path => "/tmp/logstash_output_novell_eos.txt"
        }
    #}
    #else if [type] == "novell_edir" {
        file {
            type => "novell_edir"
            path => "/tmp/logstash_output_novell_edir.txt"
        }
    #}
    #else if [type] == "sun_ldap" {
        file {
            type => "sun_ldap"
            path => "/tmp/logstash_output_sun_ldap.txt"
        }
    #}
    #else {
        file {
            path => "/tmp/logstash_output_others.txt"
        }
    #}
}
